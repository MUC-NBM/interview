(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{484:function(t,a,s){"use strict";s.r(a);var r=s(2),n=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"操作系统-多线程同步实验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统-多线程同步实验"}},[t._v("#")]),t._v(" 操作系统——多线程同步实验")]),t._v(" "),a("h2",{attrs:{id:"线程与进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程与进程"}},[t._v("#")]),t._v(" 线程与进程")]),t._v(" "),a("ol",[a("li",[t._v("线程的概念\n线程（英语：thread）是操作系统能够进行运算调度的最小单位。\n一个线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。\n同一进程中的多个线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）。")]),t._v(" "),a("li",[t._v("线程同步——互斥锁、条件变量\n"),a("ul",[a("li",[t._v("互斥锁、加锁、解锁\n线程调用该函数让互斥锁上锁，如果该互斥锁已被另一个线程锁定和拥有，则调用该线程将阻塞，直到该互斥锁变为可用为止。")]),t._v(" "),a("li",[t._v('条件变量\n条件变量是利用线程间共享的全局变量进行同步的一种机制，主要包括两个动作：一个线程等待"条件变量的条件成立"而挂起；另一个线程使"条件成立"（给出条件成立信号）。为了防止竞争，条件变量的使用总是和一个互斥锁结合在一起。')]),t._v(" "),a("li",[t._v("线程同步---Posix信号量\n信号量是一种计数器，用于控制对多个线程对共享资源的访问。")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);