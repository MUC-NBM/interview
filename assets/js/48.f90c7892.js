(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{468:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("ul",[t("li",[t("a",{attrs:{href:"#sql-%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3"}},[s._v("SQL 学习文档")])])]),s._v(" "),t("ol",[t("li",[s._v("基础语法 - 查询 - 常量和运算")])]),s._v(" "),t("p",[s._v("SQL 可以直接把常量作为列名，比如执行下列 SQL 语句：\nselect 200, '篮球' as hobby;")]),s._v(" "),t("p",[s._v("我对 sql 的理解;\nselect 会依次执行你的语句，假如你需要新创造一列，那么就可以多创造几个语句\n"),t("img",{attrs:{src:"image/1695012050218.png",alt:"1695012050218"}})]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("基础语法 - 条件查询 - where")])]),s._v(" "),t("p",[s._v("where放在最后面\n3. is NULL 和 IS NOT NULL 判断非空\n4. 模糊查询")]),s._v(" "),t("ol",[t("li",[s._v("百分号（%）：表示任意长度的任意字符序列。")]),s._v(" "),t("li",[s._v("下划线（_）：表示任意单个字符。")]),s._v(" "),t("li",[s._v("'%李%'表示 name 中含李，可以在任意位置")]),s._v(" "),t("li",[s._v("'%李'表示结尾含，'李%'表示开头含李")]),s._v(" "),t("li",[s._v("包含和不包含于"),t("code",[s._v("like")]),s._v("和"),t("code",[s._v("not like")]),s._v("有关")]),s._v(" "),t("li",[s._v("去重")])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("select distinct column from tablename\n")])])]),t("ol",{attrs:{start:"6"}},[t("li",[s._v("排序asc\n"),t("code",[s._v("放在最后，order by 'name'")]),s._v("\nasc 为升序，desc 为降序。但是降序为从大到小。(排序不加 where)\n在排序的基础上，我们还可以根据多个字段的值进行排序。当第一个字段的值相同时，再按照第二个字段的值进行排序，以此类推。")])]),s._v(" "),t("p",[s._v("示例语法如下：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" 字段"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("升序"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("降序"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 字段"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("升序"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("降序"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])])]),t("ol",{attrs:{start:"7"}},[t("li",[s._v("截断和偏移\n"),t("ol",[t("li",[s._v("概念：\n"),t("blockquote",[t("p",[s._v("假设你有一张待办事项清单，上面有很多任务。当你每次只想查看其中的几个任务时，会怎么办呢？\n1）你可以使用手指挡住不需要看的部分（即截断）\n2）根据任务的编号，直接翻到需要查看的位置（即偏移）")])])]),s._v(" "),t("li",[s._v("代码")])])])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- LIMIT 后只跟一个整数，表示要截断的数据条数（一次获取几条）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" task_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" due_date "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" tasks "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- LIMIT 后跟 2 个整数，依次表示从第几条数据开始、一次获取几条")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" task_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" due_date "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" tasks "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("ol",{attrs:{start:"8"}},[t("li",[s._v("条件分支语法")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 请在此处输入 SQL")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("  name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("when")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"老同学"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("when")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"年轻"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小同学"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" age_level\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student\n")])])]),t("p",[s._v("注意，此时的then直接接结果，然后保存为一个新的选项")]),s._v(" "),t("ol",{attrs:{start:"9"}},[t("li",[s._v("时间函数")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 获取当前日期")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("current_date")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 获取当前日期时间")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATETIME")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" current_datetime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 获取当前时间")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TIME")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("current_time")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("ol",{attrs:{start:"10"}},[t("li",[s._v("字符串处理\nUPPER(),LENGTH(),LOWER()")])]),s._v(" "),t("p",[t("code",[s._v('-- 请在此处输入 SQL select id,name,UPPER(name) as upper_name from student where name="热dog"')])]),s._v(" "),t("ol",{attrs:{start:"11"}},[t("li",[s._v("聚合函数\n常见的聚合函数包括：\nCOUNT：计算指定列的行数或非空值的数量。\nSUM：计算指定列的数值之和。\nAVG：计算指定列的数值平均值。\nMAX：找出指定列的最大值。\nMIN：找出指定列的最小值。")])]),s._v(" "),t("p",[s._v("使用count计算的技巧")]),s._v(" "),t("ul",[t("li",[s._v("count(*)计算全体数据")]),s._v(" "),t("li",[s._v("count(distinct 列名)计算该列中的不同的数据")])]),s._v(" "),t("ol",{attrs:{start:"12"}},[t("li",[s._v("分组聚合 - 单字段分组\ngroup by函数可以充当distinct的作用：\n例如：\n"),t("img",{attrs:{src:"image/image.png",alt:"Alt text"}}),s._v(" "),t("img",{attrs:{src:"image/image-1.png",alt:"Alt text"}}),s._v(" "),t("img",{attrs:{src:"image/image-2.png",alt:"Alt text"}}),s._v("\n`\n出现的问题：")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("为什么`SELECT class_id,name,count(id) as id\nFROM student;\n-- select * from student`\n的结果只有一行，如果删去count(id)AS id就会显示全部行\n")])])]),t("p",[s._v("回答：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("这个查询的意思是，从student表中选择class_id，name字段，并计算每个class_id，name组合的id数量。因此，如果你有很多行具有相同的class_id和name，那么这些行将会被组合在一起，并且id的数量会被计算出来。\n\n这就是为什么结果只有一行的原因。因为你的查询是基于class_id和name进行分组的，并且每个分组只有一个结果行（包含该组的class_id，name和该组的id数量）。\n\n如果你删除count(id) as id，那么查询变为：\n\nsql\nSELECT class_id, name  \nFROM student\n这个查询只是简单地从student表中选择class_id和name字段，并没有进行任何分组或计数。因此，你会看到所有的行，每个行都包含其对应的class_id和name。\n\n简单来说，分组和计数是通过count(id) as id实现的，这会将具有相同class_id和name的行组合在一起并计算它们的数量。如果你删除这部分，查询就不会进行分组或计数，因此你会看到所有的行。\n")])])]),t("p",[t("a",{attrs:{href:"./The-Art-of-Linear-Algebra-zh-CN.pdf"}},[s._v("11111111")])]),s._v(" "),t("p",[s._v("续问：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("但是我的代码中并没有出现group by\n")])])]),t("p",[s._v("回答：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("你的查询语句中确实没有显式地包含GROUP BY子句，但是count(id)函数的效果实际上是将结果按照class_id和name字段进行分组，并计算每个组的id数量。\n\n如果你想看到每个class_id和name组合对应的id数量，那么你的查询语句是正确的。如果你想要看到所有的行而不对它们进行分组或计数，那么你应该删除count(id) as id这部分。\n\n总结一下，你的查询语句的行为是基于class_id和name字段进行分组的，并计算每个组的id数量。如果你想要看到所有的行而不对它们进行分组或计数，你应该删除count(id) as id这部分。\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);